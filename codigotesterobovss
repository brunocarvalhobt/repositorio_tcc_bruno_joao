#include "ESP32_NOW.h"
#include "WiFi.h"

#include <esp_mac.h>  // For the MAC2STR and MACSTR macros
#include <math.h>

#define VERBOSE_MODE  1

#define CONTROLLER_0  32
#define CONTROLLER_1  33
#define CONTROLLER_2  25
#define CONTROLLER_3  26

/* Definitions */

#define ESPNOW_WIFI_CHANNEL 6

char data_to_send[17] = "111111111111";

/* Classes */

// Creating a new class that inherits from the ESP_NOW_Peer class is required.

class ESP_NOW_Broadcast_Peer : public ESP_NOW_Peer {
public:
  ESP_NOW_Broadcast_Peer(uint8_t channel, wifi_interface_t iface, const uint8_t *lmk) 
    : ESP_NOW_Peer(ESP_NOW.BROADCAST_ADDR, channel, iface, lmk) {}

  ~ESP_NOW_Broadcast_Peer() {
    remove();
  }

  bool begin() {
    if (!ESP_NOW.begin() || !add()) {
      log_e("Failed to initialize ESP-NOW or register the broadcast peer");
      return false;
    }
    return true;
  }

  bool send_message(const uint8_t *data, size_t len) {
    if (!send(data, len)) {
      log_e("Failed to broadcast message");
      return false;
    }
    return true;
  }
};

/* Function to Simulate Button Presses */
bool scan_controllers() {
  static int current_state = 0;  // Track the current simulated button
  static unsigned long last_update = 0;

  unsigned long current_time = millis();
  
  // Keep the interval as in the original code
  if (current_time - last_update < 1000) {
    return false;
  }

  last_update = current_time;

  // Reset the data array
  memset(data_to_send, '0', 16);

  // Simulate button presses for Frente, Trás, Direita, Esquerda
  switch (current_state) {
    case 0:
      data_to_send[1] = '1'; // Frente
      break;
    case 1:
      data_to_send[0] = '1'; // Trás
      break;
    case 2:
      data_to_send[0] = '1'; // Tras
      break;
    case 3:
      data_to_send[1] = '1'; // Frente
      break;
    case 4: 
      data_to_send[2] = '1'; // Frente
      break;
    case 5: 
      data_to_send[3] = '1'; // Frente
      break;

  }

  // Move to the next state
  current_state = (current_state + 1) % 6;

  // Return true to indicate a change
  return true;
}

/* Global Variables */

// Create a broadcast peer object
ESP_NOW_Broadcast_Peer broadcast_peer(ESPNOW_WIFI_CHANNEL, WIFI_IF_STA, NULL);

/* Main */

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    delay(10);
  }

  // Initialize the Wi-Fi module
  WiFi.mode(WIFI_STA);
  WiFi.setChannel(ESPNOW_WIFI_CHANNEL);
  while (!WiFi.STA.started()) {
    delay(100);
  }

  Serial.println("ESP-NOW Example - Broadcast Master");
  Serial.println("Wi-Fi parameters:");
  Serial.println("  Mode: STA");
  Serial.println("  MAC Address: " + WiFi.macAddress());
  Serial.printf("  Channel: %d\n", ESPNOW_WIFI_CHANNEL);

  // Register the broadcast peer
  if (!broadcast_peer.begin()) {
    Serial.println("Failed to initialize broadcast peer");
    Serial.println("Reebooting in 5 seconds...");
    delay(5000);
    ESP.restart();
  }

  Serial.println("Setup complete. Automating controls.");
}

void loop() {
  // Simulate button presses
  if (scan_controllers()) {
    if (VERBOSE_MODE) {
      Serial.printf("Simulated control: %s\n", data_to_send);
    }
    if (!broadcast_peer.send_message((uint8_t *)data_to_send, sizeof(data_to_send))) {
      Serial.println("Failed to broadcast message");
    }
  }
}
